{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2025-04-04T13:15:53.915Z",
    "end": "2025-04-04T13:15:54.826Z",
    "duration": 911,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5a7b1e9c-9d17-47e7-a46d-43d3bad24dd9",
      "title": "",
      "fullFile": "cypress\\apiTests\\UserManagement.js",
      "file": "cypress\\apiTests\\UserManagement.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9a246664-a29f-4f37-95b7-a58d6cb4328f",
          "title": "ReqRes API Testing - User Management Scenarios",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should fetch a list of users",
              "fullTitle": "ReqRes API Testing - User Management Scenarios Should fetch a list of users",
              "timedOut": null,
              "duration": 74,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getUsers().then(response => {\n  expect(response.status).to.eq(200);\n  cy.log(\"Page: \" + response.body.page);\n  cy.log(\"Total Users: \" + response.body.total);\n  console.log(\"Users Data:\", response.body.data);\n});",
              "err": {},
              "uuid": "fbe0a4d0-788a-48c5-ae40-7e14d07e83ea",
              "parentUUID": "9a246664-a29f-4f37-95b7-a58d6cb4328f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should fetch a single user",
              "fullTitle": "ReqRes API Testing - User Management Scenarios Should fetch a single user",
              "timedOut": null,
              "duration": 43,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getSingleUser(this.userData.id).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.data.id).to.eq(1);\n});",
              "err": {},
              "uuid": "b7e312ed-bbd3-451d-b1e0-07f062dcd459",
              "parentUUID": "9a246664-a29f-4f37-95b7-a58d6cb4328f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should create a new user",
              "fullTitle": "ReqRes API Testing - User Management Scenarios Should create a new user",
              "timedOut": null,
              "duration": 203,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  name: faker.person.firstName(),\n  job: faker.person.jobTitle()\n};\ncy.CreateUser(newUser.name, newUser.job).then(response => {\n  expect(response.status).to.eq(201);\n  expect(response.body.name).to.eq(newUser.name);\n  expect(response.body.job).to.eq(newUser.job);\n});",
              "err": {},
              "uuid": "aec7f0ab-58bc-4cb4-8df5-dfebbf84778f",
              "parentUUID": "9a246664-a29f-4f37-95b7-a58d6cb4328f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should update user information",
              "fullTitle": "ReqRes API Testing - User Management Scenarios Should update user information",
              "timedOut": null,
              "duration": 212,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedUser = {\n  name: faker.person.firstName(),\n  job: faker.person.jobTitle()\n};\ncy.UpdateUser(2, updatedUser.name, updatedUser.job).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.name).to.eq(updatedUser.name);\n  expect(response.body.job).to.eq(updatedUser.job);\n});",
              "err": {},
              "uuid": "dd1895da-6b08-4e3c-9b59-24484bdbeaac",
              "parentUUID": "9a246664-a29f-4f37-95b7-a58d6cb4328f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should delete a user",
              "fullTitle": "ReqRes API Testing - User Management Scenarios Should delete a user",
              "timedOut": null,
              "duration": 199,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const userIdToDelete = 2; // Specify a user ID to delete\ncy.DeleteUser(userIdToDelete).then(response => {\n  expect(response.status).to.eq(204); // Status code for successful deletion\n});",
              "err": {},
              "uuid": "4a3aa651-44dd-4848-87c8-36f3a67138e6",
              "parentUUID": "9a246664-a29f-4f37-95b7-a58d6cb4328f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should fetch a list of users and validate response schema",
              "fullTitle": "ReqRes API Testing - User Management Scenarios Should fetch a list of users and validate response schema",
              "timedOut": null,
              "duration": 78,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getUsers().then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body.data).to.be.an('array');\n  // Validate schema of each user\n  response.body.data.forEach(user => {\n    expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');\n    expect(user.id).to.be.a('number');\n    expect(user.email).to.be.a('string');\n    expect(user.first_name).to.be.a('string');\n    expect(user.last_name).to.be.a('string');\n    expect(user.avatar).to.be.a('string');\n  });\n});",
              "err": {},
              "uuid": "87462682-4f18-4966-b355-650791212d4e",
              "parentUUID": "9a246664-a29f-4f37-95b7-a58d6cb4328f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fbe0a4d0-788a-48c5-ae40-7e14d07e83ea",
            "b7e312ed-bbd3-451d-b1e0-07f062dcd459",
            "aec7f0ab-58bc-4cb4-8df5-dfebbf84778f",
            "dd1895da-6b08-4e3c-9b59-24484bdbeaac",
            "4a3aa651-44dd-4848-87c8-36f3a67138e6",
            "87462682-4f18-4966-b355-650791212d4e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 809,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports"
      },
      "version": "6.2.0"
    }
  }
}